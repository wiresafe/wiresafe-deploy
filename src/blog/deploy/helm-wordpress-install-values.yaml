## Bitnami WordPress image version
## ref: https://hub.docker.com/r/bitnami/wordpress/tags/
image:
  registry: gcr.io
  repository: wiresafe-project/wiresafe/wordpress
  tag: latest
  pullPolicy: Always
## Wordpress Configuration
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
wordpressUsername: root
wordpressPassword: 1badc0ffee
wordpressEmail: "dave@wiresafe.com"
wordpressFirstName: Wiresafe
wordpressLastName: Admin
wordpressBlogName: "Wiresafe Secure Messaging"
wordpressTablePrefix: wp_
allowEmptyPassword: "no"

## SMTP mail delivery configuration
## ref: https://github.com/bitnami/bitnami-docker-wordpress/#smtp-configuration
##
# smtpHost:
# smtpPort:
# smtpUser:
# smtpPassword:
# smtpUsername:
# smtpProtocol:

##
## MariaDB chart configuration
##
mariadb:
  enabled: true
  mariadbRootPassword: 1badc0ffee
  mariadbDatabase: targetiv_wrdp18
  mariadbUser: targetiv_wrdp18
  mariadbPassword: cr0oFLEW2KnOdYH
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 10Gi

## Kubernetes configuration
## serviceType: For minikube, set this to NodePort, elsewhere use LoadBalancer or ClusterIP
serviceType: NodePort
nodePorts:
  http: ""
  https: ""
## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
#livenessProbe:
#  initialDelaySeconds: 120
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 6
#  successThreshold: 1
#readinessProbe:
#  initialDelaySeconds: 300
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 6
#  successThreshold: 1

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi
  ## wordpress data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: pvc-bd826bcd-08ef-11e8-b9c2-42010a800173

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Configure the ingress resource that allows you to access the
## Wordpress installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  enabled: true
  name: 'prod-wiresafe'
  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
  - name: wiresafe.com
    tls: false
    annotations:
      kubernetes.io/ingress.class: 'gce'
      kubernetes.io/ingress.global-static-ip-name: wiresafe-com
